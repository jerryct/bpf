cc = clang-10
llc = llc-10
objcopy = llvm-objcopy-10
objdump = llvm-objdump-10

rule cc_kernel
    deps = gcc
    depfile = $out.d
    command = $cc -Wall -Wextra -Werror -emit-llvm -O2 -MD -MF $out.d -c $in -o $out

rule link_kernel
    command = $llc -march=bpf -filetype=obj -o $out $in

rule cc_host
    deps = gcc
    depfile = $out.d
    command = $cc -Wall -Wextra -Wpedantic -Werror -MD -MF $out.d -c $in -o $out

rule link_host
    command = $cc $in -o $out

rule extract
    command = $objcopy -O binary --only-section=.text $in $out

rule header
    command = xxd -i $in $out

rule objdump
    command = $objdump -arch-name=bpf -S $in

rule format
    command = clang-format-8 -i -style="{BasedOnStyle: llvm, ColumnLimit: 120}" *.h *.c

build format: format

build loader.o: cc_host loader.c
build bpf.o: cc_host libbpf/bpf.c

build funclatency_entry.o: cc_kernel funclatency_entry.c
build funclatency_entry: link_kernel funclatency_entry.o
build funclatency_entry_text: extract funclatency_entry
build funclatency_entry.h: header funclatency_entry_text

build funclatency_exit.o: cc_kernel funclatency_exit.c
build funclatency_exit: link_kernel funclatency_exit.o
build funclatency_exit_text: extract funclatency_exit
build funclatency_exit.h: header funclatency_exit_text

build funclatency.o: cc_host funclatency.c | funclatency_entry.h funclatency_exit.h
build funclatency: link_host bpf.o loader.o funclatency.o
